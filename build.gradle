import java.util.regex.Matcher

buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
        gradleDockerVersion = '1.2'

        dockerRepo = 'hello'
        containerName = 'employee'
        imageId = '0.0.1'
        volumes = "${System.getProperty( 'user.dir' )}/src/main/docker/volumes"

    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("se.transmode.gradle:gradle-docker:${gradleDockerVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'

group = 'com.practice.employee.skill'
version = "${imageId}-SNAPSHOT"
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compile group: 'postgresql', name: 'postgresql', version: '9.0-801.jdbc4'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

//Removes Docker Image
task recycle(){
    doLast{
        //Stops Docker Container
        def stopContainer = exec{
            ignoreExitValue = true
            executable "docker"
            args "stop", "${containerName}"
        }
        if(stopContainer.getExitValue()==0){
            print "Container Stopped.\n\n"
        }else{
            print "No Container To Stop.\n\n"
        }

        //Removes Docker Container
        def removeContainer = exec{
            ignoreExitValue = true
            executable "docker"
            args "rm", "${containerName}"
        }
        if(removeContainer.getExitValue()==0){
            print "Container Removed.\n\n"
        }else{
            print "No Container To Remove.\n\n"
        }

        //Removes Docker Image
        def removeImage = exec{
            ignoreExitValue = true
            executable "docker"
            args "rmi", "${dockerRepo}/${containerName}:${imageId}"
        }
        if(removeImage.getExitValue()==0){
            print "Image Removed.\n"
        }else{
            print "No Image To Remove.\n"
        }
    }
}

//Builds Docker Image
task image(type: Docker, dependsOn: build) {
    dockerfile = file('src/main/docker/Dockerfile')
    applicationName = "${containerName}"
    tag = "${dockerRepo}/"+ applicationName
    tagVersion = "${imageId}"
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}


//Pushes Docker Image
task push(){
    doLast{
        exec{
            executable "docker"
            args "push", "${dockerRepo}/${containerName}:${imageId}"
        }
    }
}

//Runs Docker Container
task start(){
    doLast{
        exec{
            executable "docker"
            args "run",
                 "-d",
                 "-p", "8080:8080",
                 "--name", "${containerName}",
                 "--net","wild-west",
                 //"-v","${volumes}/conf/:/tmp",
                 "-v","/tmp:/tmp",
                 "${dockerRepo}/${containerName}:${imageId}"

        }
        exec{
            executable "docker"
            args "inspect", "-f","'{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'", "${containerName}"
            standardOutput = new ByteArrayOutputStream()
            ext.ip = {
                standardOutput.toString()
            }


        }
        def ip = tasks.start.ip().replace("'", "").trim()
        def host = "${ip} ${containerName}"
        print "${host}"

    }
}
